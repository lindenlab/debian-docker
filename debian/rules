#!/usr/bin/make -f
# -*- makefile -*-

DOCKER_GOPKG = github.com/docker/docker

# MUST STAY IN SYNC WITH LIST IN "debian/helpers/download-libcontainer"
MULTI_ORIG_GOPKGS = \
	github.com/docker/libcontainer \
	github.com/docker/libtrust \
	github.com/docker/libnetwork \
	github.com/vishvananda/netns \
	github.com/vishvananda/netlink \
	github.com/mistifyio/go-zfs \
	github.com/docker/distribution

# the list of Go packages to include in golang-docker-dev
DEV_GOPKGS = \
	github.com/docker/docker/autogen/dockerversion \
	github.com/docker/docker/pkg \
	github.com/docker/libcontainer \
	github.com/docker/libnetwork

# temporary build path (see http://golang.org/doc/code.html#GOPATH)
export GOPATH = $(CURDIR)/.gopath
GOPATH_PACKAGED = /usr/share/gocode

# a few helpful variables for deduplication
DOCKER_BINPATH = /usr/bin/docker
DOCKER_VERSION = $(shell cat VERSION)

export DOCKER_GITCOMMIT = $(shell ./debian/helpers/gitcommit.sh $(DOCKER_VERSION))
export DOCKER_INITPATH = /usr/lib/docker.io/dockerinit

# AppArmor can be optionally used in Debian and is there by default in Ubuntu, so we need support for it compiled into our binary
export DOCKER_BUILDTAGS = apparmor


APPARMOR_RECOMMENDS = $(shell dpkg-vendor --is Ubuntu && echo apparmor)
BUILT_LIBC := $(shell dpkg-query -f '$${source:Package} (= $${source:Version})' -W libc-dev-bin)

override_dh_gencontrol:
	echo 'apparmor:Recommends=$(APPARMOR_RECOMMENDS)' >> debian/docker.io.substvars
	echo 'libc:Built-Using=$(BUILT_LIBC)' >> debian/docker.io.substvars
	dh_gencontrol


setup-gopath:
	# make sure we have our multitarball deps (from tarballs or from vendor/ in nightlies)
	@set -ex; \
		for package in $(MULTI_ORIG_GOPKGS); do \
			[ -d $$(basename $$package) ] || { [ -d vendor/src/$$package ] && ln -sf vendor/src/$$package $$(basename $$package); }; \
		done
	
	# we need to make sure all deps are in our GOPATH
	mkdir -p "$(GOPATH)"
	@set -ex; \
		for package in $(DOCKER_GOPKG) $(MULTI_ORIG_GOPKGS); do \
			[ $$package = $(DOCKER_GOPKG) ] \
				&& src=. \
				|| src=$$(basename $$package); \
			mkdir -p "$$GOPATH/src/$$(dirname $$package)"; \
			ln -sfT "$$(readlink -f "$$src")" "$$GOPATH/src/$$package"; \
		done

override_dh_auto_build:
	@bash -c '{ [ "$$DOCKER_GITCOMMIT" ]; } || { echo; echo "error: missing DOCKER_GITCOMMIT - see debian/upstream-version-gitcommits"; echo; exit 2; } >&2'
	
	./debian/rules setup-gopath
	
	# build "docker" and "dockerinit"
	GOPATH="$$GOPATH:$(GOPATH_PACKAGED)" \
	./hack/make.sh dynbinary
	
	# compile man pages
	./man/md2man-all.sh -q


override_dh_auto_install:
	# install docker binary
	mkdir -p debian/docker.io/$(dir $(DOCKER_BINPATH))
	cp -aT bundles/$(DOCKER_VERSION)/dynbinary/docker-$(DOCKER_VERSION) debian/docker.io/$(DOCKER_BINPATH)
	
	# install dockerinit binary
	mkdir -p debian/docker.io/$(dir $(DOCKER_INITPATH))
	cp -aT bundles/$(DOCKER_VERSION)/dynbinary/dockerinit-$(DOCKER_VERSION) debian/docker.io/$(DOCKER_INITPATH)
	
	# Most of the source of docker does not make a library,
	#   so only ship the reusable parts (and in a separate package).
	@set -ex; \
		for package in $(DEV_GOPKGS); do \
			mkdir -p "debian/golang-docker-dev/$(GOPATH_PACKAGED)/src/$$package"; \
			cp -aT "$$(readlink -f "$$GOPATH/src/$$package")" "debian/golang-docker-dev/$(GOPATH_PACKAGED)/src/$$package"; \
		done


override_dh_strip:
	# the SHA1 of dockerinit is important: don't strip it
	# also, Go has lots of problems with stripping, so just don't


override_dh_auto_test:


#override_dh_installinit:
#	dh_installinit --name=docker --no-restart-on-upgrade


override_dh_installudev:
	# use priority z80 to match the upstream priority of 80
	dh_installudev --priority=z80


override_dh_auto_clean:
	dh_auto_clean
	
	# GOPATH is created by us
	rm -rf "$(GOPATH)"
	
	# autogen is created by hack/make.sh
	# bundles is created by hack/make.sh
	# docs/man/man*/ is created by docs/man/md2man-all.sh
	rm -rf autogen bundles docs/man/man*/


%:
	dh $@ --with=systemd,bash-completion
